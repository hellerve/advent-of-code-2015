(define (solve input)
  (define (step x state visited)
    (let ((ret (lambda (el) (if (in? visited el) (list el visited) (list el (+= visited el))))))
      (case x
        ((#\>) (ret (list (add1 (car state)) (cadr state))))
        ((#\<) (ret (list (sub1 (car state)) (cadr state))))
        ((#\^) (ret (list (car state) (add1 (cadr state)))))
        ((#\v) (ret (list (car state) (sub1 (cadr state)))))
        (else (begin (error "faulty input: " x) (exit 1))))))
  (let loop ((test (evens input))
             (state [0 0])
             (rnd #f)
             (visited (list [0 0])))
    (cond
      ((and (null? test) (not rnd)) (loop (odds input) [0 0] #t visited))
      ((and (null? test) rnd) (length visited))
      (else
        (let ((d (step (car test) state visited)))
          (loop (cdr test) (car d) rnd (cadr d)))))))

(define (evens l)
  (if (null? l)
    []
    (if (null? (cdr l))
      []
      (cons (cadr l) (evens (cddr l))))))

(define (odds l)
  (if (null? l)
    []
    (if (null? (cdr l))
      []
      (cons (car l) (odds (cddr l))))))

(define x "")
(write (solve (string->list x)))
